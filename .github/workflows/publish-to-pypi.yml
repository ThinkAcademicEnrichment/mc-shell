# .github/workflows/publish-to-pypi.yml

name: Publish Python Package to PyPI

# --- Triggers ---
# This workflow runs ONLY when you create a new release on GitHub.
on:
  release:
    types: [published]

# --- Jobs ---
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code at the specific tag of the release.
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Python.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use your project's base Python version

      # Step 3: Set up Node.js for the frontend build.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mced/package-lock.json

      # Step 4: Install Poetry.
      - name: Install Poetry
        uses: snok/install-poetry@v1

      # Step 5: Install Python and Node.js dependencies.
      - name: Install Python dependencies
        run: poetry install --no-interaction
      - name: Install npm dependencies
        working-directory: ./mced
        run: npm ci

      # Step 6: Build the complete application (frontend and Python package).
      # This runs your package.json 'build' script, which creates the mcshell/data/app folder.
      - name: Build frontend application
        working-directory: ./mced
        run: npm run build
      # This runs poetry's build command to create the .whl and .tar.gz files in a new /dist folder.
      - name: Build Python package
        run: poetry build

      # Step 7: Publish the package to PyPI.
      - name: Publish package to PyPI
        # This uses a pre-made action for publishing to PyPI.
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # This is the secret API token you created.
          password: ${{ secrets.PYPI_API_TOKEN }}
